#!/usr/bin/env python
#
# Copyright (c) 2014, Federico G. Schwindt <fgsch@lodoss.net>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import argparse
import re

v3tov4 = (
    (r'sub\s+(vcl_fetch)\s*{', 'vcl_backend_response'),
    (r'sub\s+(vcl_error)\s*{', 'vcl_synth'),
    (r'(error\s+(?P<c>\d+)\s+(?P<r>"\w+"))', 'return (synth(%(c)s, %(r)s))'),
    (r'(error\s+(?P<c>\d+))', 'return (synth(%(c)s))'),
    (r'(req\.backend)\s*=', 'req.backend_hint'),
    (r'(req\.(?P<b>\w+)\.healthy)', 'std.healthy(%(b)s)'),
    (r'((?:set|unset)\s+req\.grace[^;]*;)', ''),
    (r'(?:bereq|req)\.(request)', 'method'),
    (r'(?:beresp|obj|resp)\.(response)', 'reason'),
    (r'(remove)\s+\w+', 'unset'),
    # directors
    # vcl 4.0 marker
)

def main():
    parser = argparse.ArgumentParser(prog='varnish3to4')
    parser.add_argument('config', type=argparse.FileType('r'),
                        help='Varnish 3 VCL file')
    parser.add_argument('-o', '--output', type=argparse.FileType('w'),
                        default='-') 
    args = parser.parse_args()

    config = args.config.read()
    for v3, v4 in v3tov4:
        m = re.search(v3, config)
        if m:
            config = config.replace(m.group(1), v4 % m.groupdict())
    args.output.write(config)

if __name__ == '__main__':
    main()
