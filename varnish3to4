#!/usr/bin/env python
#
# Copyright (c) 2014, Federico G. Schwindt <fgsch@lodoss.net>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import argparse
import re

def fixup(config):
    v3v4 = (
        ('(vcl_fetch)', 'vcl_backend_response'),
        ('(vcl_error)', 'vcl_synth'),
        ('(error\s+(\d+)\s+("[^"]*"))',
            'return (synth(\g<2>, \g<3>))'),
        ('(error\s+(\d+))', 'return (synth(\g<2>))'),
        ('(req\.(\w+)\.healthy)', 'std.healthy(\g<2>)'),
        ('(req\.backend)', 'req.backend_hint'),
        ('(\s*)((?:set|unset)\s+req\.grace[^;]*;)',
           '\g<1>#'
           '\g<1># This is now handled in vcl_hit.'
           '\g<1>#'
           '\g<1># \g<2>'),
        ('((bereq|req)\.(request))', '\g<2>.method'),
        ('((beresp|obj|resp)\.(response))', '\g<2>.reason'),
        ('(remove\s+((?:bereq|beresp|req|resp|obj).))',
            'unset \g<2>'),
        ('(set\s+obj.hits[^;]*;)', ''),
        ('((\s*)return\s*\(?hit_for_pass\)?[^;])',
            '\g<2># set beresp.ttl = 120s;'
            '\g<2>set beresp.uncacheable = true;'
            '\g<2>return (deliver)'),
        ('((client|server)\.port)', 'std.port(\g<2>.ip)'),
    )
    for v3, v4 in v3v4:
        config = re.sub(v3, v4, config)
    return config

def fixup_multi(config):
    v3v4 = (
        ('sub\s+vcl_recv\s(((?!sub ).)*$)',
            '(return\s*\(?lookup\)?[^;])', 'return (hash)'),
        ('sub\s+vcl_hash\s(((?!sub ).)*$)',
            '(return\s*\(?hash\)?[^;])', 'return (lookup)'),
        ('sub\s+vcl_backend_response\s(((?!sub ).)*$)',
            '((?<!be)req\.(\w+))', 'bereq.\g<2>'),
        ('^\s*(synthetic\s+((?:{|").*?(?:"|})));', '(\w+)\s+(.*)',
            '\g<1>(\g<2>)'),
        ('(set\s+[^;]*;)', '^(.*)$',
            lambda m:[m.group(), '']['last_use' in m.group()]),
    )
    for s, v3, v4 in v3v4:
        for m in re.finditer(s, config, re.S | re.M):
            config = config.replace(m.group(1),
                                    re.sub(v3, v4, m.group(1), 0, re.S | re.M))
    return config

def main():
    parser = argparse.ArgumentParser(prog='varnish3to4')
    parser.add_argument('config', type=argparse.FileType('r'),
                        help='Varnish 3 VCL file')
    parser.add_argument('-o', '--output', type=argparse.FileType('w'),
                        default='-')
    args = parser.parse_args()

    config = fixup(args.config.read())
    config = fixup_multi(config)
    args.output.write(config)

if __name__ == '__main__':
    main()
